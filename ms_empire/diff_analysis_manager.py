# AUTOGENERATED! DO NOT EDIT! File to edit: 01_diff_analysis_manager.ipynb (unless otherwise specified).

__all__ = ['read_tables', 'run_pipeline', 'benchmark_proteomics']

# Cell
import sys
sys.path.append('/Users/constantin/workspace/EmpiRe/nbdev/MS-EmpiRe_Python/')
from .background_distributions import *
from .normalization import *
from .diff_analysis import *
from .visualizations import *
from .benchmarking import *
from .diffquant_utils import *

# Cell
import pandas as pd
import numpy as np

#read in proteomics datafiles, log the intensities
def read_tables(peptides_tsv, samplemap_tsv, pepheader = None, protheader = None):
    samplemap = pd.read_csv(samplemap_tsv, sep="\t")
    peps = pd.read_csv(peptides_tsv,sep="\t")

    if pepheader != None:
        peps = peps.rename(columns = {pepheader : "peptide"})
    if protheader != None:
        peps = peps.rename(columns = {protheader: "protein"})
    peps = peps.set_index("peptide")
    headers = ['protein'] + samplemap["sample"].to_list()

    for sample in samplemap["sample"]:
        peps[sample] = np.log2(peps[sample].replace(0, np.nan)*10000)

    return peps[headers], samplemap


# Cell
import pandas as pd
from itertools import combinations
import numpy as np
import statsmodels.stats.multitest as mt
from time import time

def run_pipeline(unnormed_df, labelmap_df, minrep, outlier_correction = True):
    conds = labelmap_df["condition"].unique()
    pep2prot = dict(zip(unnormed_df.index, unnormed_df['protein']))
    p2z = {}
    prots = []
    pvals = []
    fdrs = []
    fcs = []
    condpairs = []
    numpeps = []
    peps = []
    pep_pvals = []
    pep_fcs = []
    pep_prots = []
    peps_included = []
    for condpair in combinations(conds, 2):
        t_zero = time()
        print(f"start processeing condpair {condpair}")
        prot2diffions = {}
        cond_pvals = []
        df_c1_normed, df_c2_normed = get_normalized_dfs(labelmap_df, unnormed_df, condpair, minrep)#, "./test_data/normed_intensities.tsv")
        t_normalized = time()
        normed_c1 = ConditionBackgrounds(df_c1_normed, p2z)
        #write_out_ion2nonan_ion2idx(normed_c1, "./test_data/", "c1")
        normed_c2 = ConditionBackgrounds(df_c2_normed, p2z)
        #compare_context_boundaries_against_ref("./test_data/reference_context_boundaries_c2.tsv",normed_c2)
        #write_out_ion2nonan_ion2idx(normed_c2, "./test_data/", "c2")
        t_bgdist_fin = time()
        print(f"t_normalized {t_normalized-t_zero} t_bg_fin {t_bgdist_fin- t_normalized}")
        ions_to_check = normed_c1.ion2nonNanvals.keys() & normed_c2.ion2nonNanvals.keys()

        ion2diffDist = {}
        count_ions=0
        for ion in ions_to_check:
            t_ion = time()
            vals1 = normed_c1.ion2nonNanvals.get(ion)
            vals2 = normed_c2.ion2nonNanvals.get(ion)
            bgdist1 = normed_c1.ion2background.get(ion)
            bgdist2 = normed_c2.ion2background.get(ion)
            t_subtract_start = time()
            diffDist = get_subtracted_bg(ion2diffDist,normed_c1, normed_c2,ion, p2z)
            t_subtract_end = time()
            diffIon = DifferentialIon(vals1, vals2, diffDist, ion, outlier_correction)
            t_diffion = time()
            protein = pep2prot.get(ion)
            prot_ions = prot2diffions.get(protein, set())
            prot_ions.add(diffIon)
            prot2diffions[protein] = prot_ions
            peps.append(ion)
            pep_pvals.append(diffIon.p_val)
            pep_fcs.append(diffIon.fc)
            pep_prots.append(protein)

            if count_ions%1000==0:
                print(f"checked {count_ions} of {len(ions_to_check)}")

            count_ions+=1

            t_iterfin = time()
            #print(f"t_init {t_subtract_start-t_ion} t_diffdist {t_subtract_end -t_subtract_start} t_diffion {t_iterfin - t_ion}")

        for prot in prot2diffions.keys():
            diffprot = DifferentialProtein(prot,prot2diffions.get(prot))
            prots.append(prot)
            cond_pvals.append(diffprot.pval)
            fcs.append(diffprot.fc)
            numpeps.append(diffprot.num_ions)
            condpairs.append(get_condpairname(condpair))
            peps_included.extend(diffprot.ions)


        pvals.extend(cond_pvals)
        fdrs.extend(mt.multipletests(cond_pvals, method='fdr_bh', is_sorted=False, returnsorted=False)[1])
        #break

    res_df = pd.DataFrame({'condpair' : condpairs,'protein' : prots, 'fdr' : fdrs, 'pval':pvals, 'fc' : fcs, 'num_peptides' : numpeps})
    pep_df = pd.DataFrame({'peptide' : peps, 'protein' : pep_prots,'peptide_pval' : pep_pvals, 'peptide_fc' : pep_fcs})
    pep_df = pep_df[pep_df["peptide"].isin(peps_included)]
    return res_df, pep_df

# Cell
import pandas as pd
import numpy as np

def benchmark_proteomics(peptides_tsv, samplemap_tsv, prot2org):
    unnormed_df, sample2cond_df = read_tables(peptides_tsv, samplemap_tsv)

    protein_df, peptide_df = run_pipeline(unnormed_df, sample2cond_df, 2)
    #print(protein_df)
    #plot_pvals(protein_df)
    #get_tps_fps(protein_df, prot2org)
    return protein_df, peptide_df



# Cell
import os
os.chdir("/Users/constantin/workspace/EmpiRe/nbdev/MS-EmpiRe_Python/")
protein_df, peptide_df = benchmark_proteomics("./test_data/peptides.txt", "./test_data/samples.map", "./test_data/prot2organism.tsv")
protein_df.to_csv("./test_data/AP_protein_out.tsv", sep = "\t", index= False)
peptide_df.to_csv("./test_data/AP_peptide_out.tsv", sep = "\t", index= False)
