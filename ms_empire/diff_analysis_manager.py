# AUTOGENERATED! DO NOT EDIT! File to edit: 01_diff_analysis_manager.ipynb (unless otherwise specified).

__all__ = ['run_pipeline', 'median_offset', 'analyze_condpair', 'write_out_normed_df', 'read_tables',
           'benchmark_proteomics']

# Cell
#import sys
#sys.path.append('/Users/constantin/workspace/EmpiRe/MS-EmpiRe_Python/')
from .background_distributions import *
from .normalization import *
from .diff_analysis import *
from .visualizations import *
from .benchmarking import *
from .diffquant_utils import *

# Cell
import pandas as pd
from itertools import combinations
import numpy as np
import statsmodels.stats.multitest as mt
from time import time
def run_pipeline(peptides_tsv, samplemap_tsv, outdir = None,pepheader = None, protheader = None, minrep = 2, outlier_correction = True,
median_offset = False, pre_normed_intensity_file = None, dia_fragment_selection = False, volcano_fdr =0.05, volcano_fcthresh = 0.5, condpair_combinations = None, annotation_file = None):

    unnormed_df, labelmap_df = read_tables(peptides_tsv, samplemap_tsv, pepheader, protheader)
    conds = labelmap_df["condition"].unique()
    res_dfs = []
    pep_dfs = []
    pep2prot = dict(zip(unnormed_df.index, unnormed_df['protein']))

    if condpair_combinations != None:
        condcombs = [(x["c1"], x["c2"]) for idx, x in pd.read_csv(condpair_combinations, sep = "\t").iterrows()]
    else:
        condcombs = combinations(conds, 2)

    for condpair in condcombs:
        print(condpair)
        c1_samples = labelmap_df[labelmap_df["condition"]== condpair[0]]
        c2_samples = labelmap_df[labelmap_df["condition"]== condpair[1]]
        if (len(c1_samples.index)<2) | len(c2_samples.index)<2:
            print(f"condpair has not enough samples c1:{len(c1_samples)} c2: {len(c2_samples)}, skipping")
            continue
        df_c1 = unnormed_df.loc[:, c1_samples["sample"]].dropna(thresh=minrep, axis=0)
        df_c2 = unnormed_df.loc[:, c2_samples["sample"]].dropna(thresh=minrep, axis=0)
        if (len(df_c1.index)<5) | (len(df_c2.index)<5):
            print(f"condpair has not enough data for processing c1: {len(df_c1.index)} c2: {len(df_c2.index)}")
            continue
        res, peps = analyze_condpair(df_c1, df_c2, c1_samples, c2_samples, pep2prot,outdir,condpair, minrep, outlier_correction, median_offset, pre_normed_intensity_file , dia_fragment_selection,
        volcano_fdr, volcano_fcthresh, annotation_file)
        res_dfs.append(res)
        pep_dfs.append(peps)

    res_df = pd.concat(res_dfs)
    pep_df = pd.concat(pep_dfs)

    return res_df, pep_df



# Cell
def analyze_condpair(df_c1, df_c2, c1_samples, c2_samples, pep2prot, outdir,condpair, minrep, outlier_correction, median_offset, pre_normed_intensity_file , dia_fragment_selection, volcano_fdr, volcano_fcthresh, annotation_file):
    t_zero = time()
    print(f"start processeing condpair {condpair}")
    prot2diffions = {}
    p2z = {}
    prots = []
    pvals = []
    fdrs = []
    fcs = []
    numpeps = []
    peps = []
    pep_pvals = []
    pep_fdrs = []
    pep_fcs = []
    pep_prots = []
    peps_included = []
    pseudoint1 = []
    pseudoint2 = []
    condpairs = []

    df_c1_normed, df_c2_normed = get_normalized_dfs(df_c1, df_c2, c1_samples, c2_samples,minrep, pre_normed_intensity_file)#, "./test_data/normed_intensities.tsv")
    if outdir != None:
        write_out_normed_df(df_c1_normed,df_c2_normed, pep2prot, outdir, condpair)
    t_normalized = time()
    normed_c1 = ConditionBackgrounds(df_c1_normed, p2z)
    #write_out_ion2nonan_ion2idx(normed_c1, "./test_data/", "c1")
    normed_c2 = ConditionBackgrounds(df_c2_normed, p2z)
    #compare_context_boundaries_against_ref("./test_data/reference_context_boundaries_c2.tsv",normed_c2)
    #write_out_ion2nonan_ion2idx(normed_c2, "./test_data/", "c2")
    t_bgdist_fin = time()
    ions_to_check = normed_c1.ion2nonNanvals.keys() & normed_c2.ion2nonNanvals.keys()

    ion2diffDist = {}
    count_ions=0
    for ion in ions_to_check:
        t_ion = time()
        vals1 = normed_c1.ion2nonNanvals.get(ion)
        vals2 = normed_c2.ion2nonNanvals.get(ion)
        diffDist = get_subtracted_bg(ion2diffDist,normed_c1, normed_c2,ion, p2z)
        t_subtract_end = time()
        diffIon = DifferentialIon(vals1, vals2, diffDist, ion, outlier_correction)
        t_diffion = time()
        protein = pep2prot.get(ion)
        prot_ions = prot2diffions.get(protein, list())
        prot_ions.append(diffIon)
        prot2diffions[protein] = prot_ions
        peps.append(ion)
        pep_pvals.append(diffIon.p_val)
        pep_fcs.append(diffIon.fc)
        pep_prots.append(protein)

        if count_ions%2000==0:
            print(f"checked {count_ions} of {len(ions_to_check)} ions")

        count_ions+=1

        t_iterfin = time()
        #print(f"t_init {t_subtract_start-t_ion} t_diffdist {t_subtract_end -t_subtract_start} t_diffion {t_iterfin - t_ion}")

    for prot in prot2diffions.keys():
        diffprot = DifferentialProtein(prot,prot2diffions.get(prot), median_offset, dia_fragment_selection)
        prots.append(prot)
        pvals.append(diffprot.pval)
        fcs.append(diffprot.fc)
        numpeps.append(diffprot.num_ions)
        condpairs.append(get_condpairname(condpair))
        peps_included.extend(diffprot.ions)

    # pseudoint1_cond, pseudoint2_cond = calc_pseudo_intensities(df_c2_normed, pep2prot, prots, fcs,condpair)
    # pseudoint1.extend(pseudoint1_cond)
    # pseudoint2.extend(pseudoint2_cond)

    fdrs = mt.multipletests(pvals, method='fdr_bh', is_sorted=False, returnsorted=False)[1]
    pep_fdrs = mt.multipletests(pep_pvals, method='fdr_bh', is_sorted=False, returnsorted=False)[1]

    res_df = pd.DataFrame({'condpair' : condpairs,'protein' : prots, 'fdr' : fdrs, 'pval':pvals, 'log2fc' : fcs, 'num_peptides' : numpeps})#, 'pseudoint1' :  pseudoint1, 'pseudoint2' : pseudoint2})
    pep_df = pd.DataFrame({'condpair' : [get_condpairname(condpair) for x in range(len(peps))], 'ion' : peps, 'protein' : pep_prots,'pval' : pep_pvals, 'log2fc' : pep_fcs})
    pep_df["fdr"] = pep_fdrs
    pep_df = pep_df[pep_df["ion"].isin(peps_included)]


    volcano_plot(res_df, significance_cutoff = volcano_fdr, log2fc_cutoff = volcano_fcthresh)
    volcano_plot(pep_df,significance_cutoff = volcano_fdr, log2fc_cutoff = volcano_fcthresh)

    if outdir!=None:
        if annotation_file != None:
            annot_df = pd.read_csv(annotation_file, sep = "\t")
            intersect_columns = annot_df.columns.intersection(pep_df.columns)
            if(len(intersect_columns)>0):
                print(list(intersect_columns))
                res_df = res_df.merge(annot_df, on=list(intersect_columns), how= 'left')
                pep_df = pep_df.merge(annot_df, on= list(intersect_columns), how = 'left')

        res_df.to_csv(f"{outdir}/diffresults/{get_condpairname(condpair)}.results.tsv", sep = "\t", index=None)
        pep_df.to_csv(f"{outdir}/diffresults/{get_condpairname(condpair)}.results.ions.tsv", sep = "\t", index=None)



    return res_df, pep_df





# Cell
import numpy as np
import os
def write_out_normed_df(normed_df_1, normed_df_2, pep2prot, outdir, condpair):
    merged_df = normed_df_1.merge(normed_df_2, left_index = True, right_index = True)
    merged_df = 2**merged_df
    merged_df = merged_df.replace(np.nan, 0)
    merged_df["protein"] = list(map(lambda x : pep2prot.get(x),merged_df.index))
    if not os.path.exists(f"{outdir}/diffresults/"):
        os.mkdir(f"{outdir}/diffresults/")
    merged_df.to_csv(f"{outdir}/diffresults/{get_condpairname(condpair)}.normed.tsv", sep = "\t")

# Cell
import pandas as pd
import numpy as np

#read in proteomics datafiles, log the intensities
def read_tables(peptides_tsv, samplemap_tsv, pepheader = None, protheader = None):
    samplemap = pd.read_csv(samplemap_tsv, sep="\t")
    peps = pd.read_csv(peptides_tsv,sep="\t")

    if pepheader != None:
        peps = peps.rename(columns = {pepheader : "ion"})
    if protheader != None:
        peps = peps.rename(columns = {protheader: "protein"})
    peps = peps.set_index("ion")
    headers = ['protein'] + samplemap["sample"].to_list()

    for sample in samplemap["sample"]:
        peps[sample] = np.log2(peps[sample].replace(0, np.nan))#*10000
    return peps[headers], samplemap

# Cell
import pandas as pd
import numpy as np

def benchmark_proteomics(peptides_tsv, samplemap_tsv, prot2org):
    #unnormed_df, sample2cond_df = read_tables(peptides_tsv, samplemap_tsv)
    protein_df, peptide_df = run_pipeline(peptides_tsv, samplemap_tsv, pepheader = None, protheader = None, minrep = 2, outlier_correction = True, median_offset = True, pre_normed_intensity_file = "./test_data/normed_intensities.tsv")
    #protein_df, peptide_df = run_pipeline(unnormed_df, sample2cond_df, 2)
    #print(protein_df)
    #plot_pvals(protein_df)
    #get_tps_fps(protein_df, prot2org)
    return protein_df, peptide_df