# AUTOGENERATED! DO NOT EDIT! File to edit: 01_diff_analysis_manager.ipynb (unless otherwise specified).

__all__ = ['run_pipeline', 'run_pipeline']

# Cell
#read in peptide datafiles



# Cell
import pandas as pd
from itertools import combinations
import numpy as np

def run_pipeline(unnormed_df, labelmap_df, minrep):
    conds = labelmap_df["condition"].unique()
    condpair2diffions = {}
    for condpair in combinations(conds, 2):

        c1_samples = labelmap_df[labelmap_df["condition"]== condpair[0]]
        c2_samples = labelmap_df[labelmap_df["condition"]== condpair[1]]
        df_c1 = unnormed_df.loc[:, c1_samples["sample"]].dropna(thresh=c1_samples.shape[0]-minrep, axis=0)
        df_c2 = unnormed_df.loc[:, c2_samples["sample"]].dropna(thresh=c2_samples.shape[0]-minrep, axis=0)
        display(df_c1)
        df_c1_normed = pd.DataFrame(normalize_withincond(df_c1.to_numpy().T).T, index = df_c1.index)
        print("end norm1")
        display(df_c1_normed)
        df_c2_normed = pd.DataFrame(normalize_withincond(df_c2.to_numpy().T).T, index = df_c2.index)

        normed_c1 = ConditionBackgrounds(df_c1_normed)
        normed_c2 = ConditionBackgrounds(df_c2_normed)

        ions_to_check = normed_c1.ion2nonNanvals.keys() & normed_c2.ion2nonNanvals.keys()

        ion2diffDist = {}
        diffIons = []
        for ion in ions_to_check:
            vals1 = normed_c1.ion2nonNanvals.get(ion)
            vals2 = normed_c2.ion2nonNanvals.get(ion)
            bgdist1 = normed_c1.ion2background.get(ion)
            bgdist2 = normed_c2.ion2background.get(ion)
            diffDist = get_subtracted_bg(ion2diffDist,bgdist1, bgdist2,ion )
            diffIon = DifferentialIon(vals1, vals2, diffDist)
            diffIons.append(diffIon)

        condpair2diffions.update({condpair :diffIon})

# Cell
import pandas as pd
from itertools import combinations
import numpy as np

def run_pipeline(unnormed_df, labelmap_df, minrep):
    conds = labelmap_df["condition"].unique()
    condpair2diffions = {}
    for condpair in combinations(conds, 2):

        c1_samples = labelmap_df[labelmap_df["condition"]== condpair[0]]
        c2_samples = labelmap_df[labelmap_df["condition"]== condpair[1]]
        df_c1 = unnormed_df.loc[:, c1_samples["sample"]].dropna(thresh=c1_samples.shape[0]-minrep, axis=0)
        df_c2 = unnormed_df.loc[:, c2_samples["sample"]].dropna(thresh=c2_samples.shape[0]-minrep, axis=0)

        df_c1_normed = pd.DataFrame(normalize_withincond(df_c1.to_numpy().T).T, index = df_c1.index)
        df_c2_normed = pd.DataFrame(normalize_withincond(df_c2.to_numpy().T).T, index = df_c2.index)

        normed_c1 = ConditionBackgrounds(df_c1_normed)
        normed_c2 = ConditionBackgrounds(df_c2_normed)

        ions_to_check = normed_c1.ion2nonNanvals.keys() & normed_c2.ion2nonNanvals.keys()

        ion2diffDist = {}
        diffIons = []
        for ion in ions_to_check:
            vals1 = normed_c1.ion2nonNanvals.get(ion)
            vals2 = normed_c2.ion2nonNanvals.get(ion)
            bgdist1 = normed_c1.ion2background.get(ion)
            bgdist2 = normed_c2.ion2background.get(ion)
            diffDist = get_subtracted_bg(ion2diffDist,bgdist1, bgdist2,ion )
            diffIon = DifferentialIon(vals1, vals2, diffDist)
            diffIons.append(diffIon)

        condpair2diffions.update({condpair :diffIon})