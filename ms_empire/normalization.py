# AUTOGENERATED! DO NOT EDIT! File to edit: 01_normalization.ipynb (unless otherwise specified).

__all__ = ['normalize_withincond', 'get_bestmatch_pair', 'get_fcdistrib', 'determine_anchor_and_shift_sample',
           'shift_samples', 'get_total_shift', 'merge_distribs']

# Cell
import numpy as np
import matplotlib.pyplot as plt

def normalize_withincond(samples):

    "finds optimal scaling factors for samples measured in the same condition and corrects the samples by these scaling factors. Takes a 2d numpy array as input  "

    num_samples = samples.shape[0]
    mergedsamples = samples #the virtual "merged" samples will be stored in this array
    sampleidx2shift = dict(zip(range(num_samples), np.zeros(num_samples))) #the scaling factors applied to the samples are stored here
    sampleidx2counts = dict(zip(range(num_samples), np.ones(num_samples)))#keeps track of how many distributions are merged
    sampleidx2anchoridx = {} #keeps track of the shifted samples
    exclusion_set = set() #already clustered samples are stored here

    for rep in range(num_samples-1):

        anchor_idx, shift_idx, min_distance = get_bestmatch_pair(mergedsamples, exclusion_set, sampleidx2counts) #determine the closest pair of samples (one "shift" sample to be shifted and one                                                                                                              "anchor sample which stays the same") and the distance between this pair
        #update the sets
        sampleidx2anchoridx.update({shift_idx : anchor_idx})
        sampleidx2shift.update({shift_idx : min_distance })
        exclusion_set.add(shift_idx)

        anchor_sample = samples[anchor_idx]
        shift_sample = samples[shift_idx]
        shifted_sample = shift_sample - min_distance
        merged_sample = merge_distribs(anchor_sample, shifted_sample, sampleidx2counts[anchor_idx], sampleidx2counts[shift_idx])
        sampleidx2counts[anchor_idx]+=1

    for i in range(num_samples):
        shift = get_total_shift(sampleidx2anchoridx, sampleidx2shift, i)
        samples[i] = samples[i]+shift

    return samples


# Cell
def get_bestmatch_pair(samples, exclusion_set, sample2counts):
    "finds the pair of samples whose median values are closest to each other"
    i_min=None
    j_min=None
    min_distance = float('inf')

    for i in range(samples.shape[0]):
        if(i in exclusion_set):#if a sample has already been merged, it is written in the exclusion set
            continue
        for j in range(i+1, samples.shape[0]):#do every comparison once
            if(j in exclusion_set):
                continue
            distance = np.median(get_fcdistrib(samples[i], samples[j])) #the median of the shifted distribution is taken as the distance measure
            if abs(distance) < min_distance:
                i_min = i
                j_min = j
                min_distance = distance

    return determine_anchor_and_shift_sample(sample2counts, i_min, j_min, min_distance)

# Cell
def get_fcdistrib(logvals_rep1, logvals_rep2):
    "generates difference distribution between two samples"
    dist = np.subtract(logvals_rep1, logvals_rep2)
    return dist


# Cell
def determine_anchor_and_shift_sample(sample2counts, i_min, j_min, min_distance):
    "given two samples, determine the sample with fewer merges as the shift"
    counts_i = sample2counts[i_min]
    counts_j = sample2counts[j_min]
    anchor_idx = i_min if counts_i>=counts_j else j_min #ask Max for more elegant solution
    shift_idx = j_min if anchor_idx == i_min else i_min
    flip = 1 if anchor_idx == i_min else -1
    return anchor_idx, shift_idx, flip*min_distance



# Cell
def shift_samples(samples, sampleidx2anchoridx, sample2shift):
    for sample_idx in range(samples.shape[0]):
        samples[sample_idx] = samples[sample_idx]+get_total_shift(sampleidx2anchoridx, sample2shift, sample_idx)


# Cell
def get_total_shift(sampleidx2anchoridx, sample2shift,sample_idx):

    total_shift = 0.0

    while(True):
        total_shift +=sample2shift[sample_idx]
        if sample_idx not in sampleidx2anchoridx: #every shifted sample has an anchor
            break
        sample_idx = sampleidx2anchoridx[sample_idx]

    return total_shift


# Cell
def merge_distribs(anchor_distrib, shifted_distrib,counts_anchor_distrib, counts_shifted_distrib):
    "Calculate the average peptide intensities to merge two peptide distributions"
    return (anchor_distrib *counts_anchor_distrib + shifted_distrib*counts_shifted_distrib)/(counts_anchor_distrib+counts_shifted_distrib)