# AUTOGENERATED! DO NOT EDIT! File to edit: 14_protein_ptm_normalization.ipynb (unless otherwise specified).

__all__ = ['get_phosphofile2protfile', 'get_name2file', 'normalize_with_proteome', 'phospho_result_files',
           'proteom_result_files', 'reference_swissprot', 'count']

# Cell

import pandas as pd
import glob
import re
import numpy as np
import alphaquant.ptmsite_mapping as aqptm



def get_phosphofile2protfile(phospho_result_files, proteom_result_files):

    name2phosfile = get_name2file(phospho_result_files)
    name2protfile = get_name2file(proteom_result_files)
    phosfile2protfile = {name2phosfile.get(x): name2protfile.get(x) for x in name2phosfile.keys()}
    phosfile2name = {v: k for k, v in name2phosfile.items()}
    return phosfile2protfile, phosfile2name

def get_name2file(filenames):
    pattern = "(.*\/results\/)(.*)(.results.tsv)"
    name2file = {}
    for file in filenames:
        matched = re.search(pattern, file)
        if matched==None:
            continue
        name = matched.group(2)
        name2file.update({name: file})
    return name2file


def normalize_with_proteome(df_phospho, df_prot, swissprot_referenceprots):
    phospho_prots = []
    for x in df_phospho["protein"]:
        if x == None:
            phospho_prots.append(None)
        elif len(x.split("_"))<2:
            phospho_prots.append(None)
        else:
            phospho_prots.append(x.split("_")[1])
    df_phospho = df_phospho[[x != None for x in phospho_prots]]
    phospho_prots = [x for x in phospho_prots if x != None]
    df_phospho["swissprot"] = aqptm.get_idmap_column(phospho_prots, swissprot_referenceprots)


    proteome_protname2fc = dict(zip(df_prot["protein"], df_prot["log2fc"]))
    normed_log2fcs = []
    for _,row in df_phospho.iterrows():
        prot = row["swissprot"]
        fc_phospho = row["log2fc"]
        fc_proteome = proteome_protname2fc.get(prot)
        if fc_proteome==None:
            #print(f"protein {prot} not found!")
            normed_log2fc = np.nan
        else:
            normed_log2fc = fc_phospho - fc_proteome
        normed_log2fcs.append(normed_log2fc)
    df_phospho["log2fc"] = normed_log2fcs
    df_phospho = df_phospho[~np.isnan(df_phospho["log2fc"])]
    return df_phospho

phospho_result_files = glob.glob('./results/*.results.tsv')
proteom_result_files = glob.glob('./proteome/results/*.results.tsv')
reference_swissprot = "/Users/constantin/workspace/Maria_Phospho/swissprot_mapping.tsv"

phophofile2protfile, file2name = get_phosphofile2protfile(phospho_result_files, proteom_result_files)

count = 0
for phosphofile in phospho_result_files:
    protfile = phophofile2protfile.get(phosphofile)
    if protfile == None:
        continue
    df_phospho = pd.read_csv(phosphofile, sep = "\t")
    df_prot = pd.read_csv(protfile, sep = "\t")
    df_phospho = normalize_with_proteome(df_phospho, df_prot, reference_swissprot)
    df_phospho = df_phospho.drop(columns=["swissprot"])
    filename = f"./results_protnormed/{file2name.get(phosphofile)}.results.tsv"
    df_phospho.to_csv(filename, sep = "\t", index = None)

