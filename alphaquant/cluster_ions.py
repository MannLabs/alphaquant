# AUTOGENERATED! DO NOT EDIT! File to edit: 11_cluster_ions.ipynb (unless otherwise specified).

__all__ = ['find_fold_change_clusters', 'find_fold_change_clusters_base_ions', 'propagate_clusters',
           'exchange_cluster_idxs', 'get_fcs_ions', 'evaluate_distance', 'create_hierarchical_ion_grouping',
           'get_ionlist', 'update_nodes', 'exclude_node', 'cluster_along_specified_levels', 'assign_vals_to_node',
           'get_diffresults_from_clust_root_node', 'get_scored_clusterselected_ions', 'TypeFilter', 'NodeProperties',
           'regex_frgions_only', 'regex_frgions_isotopes', 'export_roots_to_json']

# Cell
import scipy.spatial.distance as distance
import scipy.cluster.hierarchy as hierarchy

def find_fold_change_clusters(diffions, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold = 0.3, pval_threshold_basis = 1e-3):
    """Compares the fold changes of different ions and returns the set of ions with consistent fold changes.

    Args:
        diffions (list[list[ionnames]] ): contains the sets of ions to be tested, for examples [[fragion1_precursor1, fragion2_precursor1, fragion3_precursor1],[fragion1_precursor2],[fragion1_precursor3, fragion2_precursor3]]. The ions are assumed to be similar!
        normed_c1 (ConditionBackground): [description]
        normed_c2 (ConditionBackground): [description]
        ion2diffDist (dict(ion : SubtractedBackground)): [description]
        p2z ([type]): [description]
        deedpair2doublediffdist ([type]): [description]
        fc_threshold (float, optional): [description]. Defaults to 0.3.
        pval_threshold_basis (float, optional): [description]. Defaults to 0.05.
    """
    nodeprops = NodeProperties()
    if len(diffions)==1:
        nodeprops.num_clusters = 1
        nodeprops.num_mainclusts = 1
        nodeprops.frac_mainclust = 1
        return {tuple(diffions[0]) : 0}, nodeprops

    diffions_idxs = [[x] for x in range(len(diffions))]
    diffions_fcs = get_fcs_ions(diffions)
    #mt_corrected_pval_thresh = pval_threshold_basis/len(diffions)
    condensed_distance_matrix = distance.pdist(diffions_idxs, lambda idx1, idx2: evaluate_distance(idx1[0], idx2[0], diffions, diffions_fcs, normed_c1, normed_c2,ion2diffDist,p2z,deedpair2doublediffdist,fc_threshold,pval_threshold_basis))
    after_clust = hierarchy.complete(condensed_distance_matrix)
    clustered = hierarchy.fcluster(after_clust, 0.1, criterion='distance')
    clustered = exchange_cluster_idxs(clustered)
    num_clusters = len(set(clustered))
    num_mainclusts = sum([x==0 for x in clustered])
    frac_mainclust = num_mainclusts/len(clustered)
    ions2clust = { tuple(diffions[ion_idx]) : clust_idx for ion_idx, clust_idx in zip(list(range(len(clustered))),clustered)}

    nodeprops.frac_mainclust = frac_mainclust
    nodeprops.num_mainclusts = num_mainclusts
    nodeprops.num_clusters = num_clusters


    return ions2clust, nodeprops


# Cell
import scipy.spatial.distance as distance
import scipy.cluster.hierarchy as hierarchy
import collections
import itertools

def find_fold_change_clusters_base_ions(all_ions, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold = 0.3, pval_threshold_basis = 1e-3):
    """Compares the fold changes of different ions and returns the set of ions with consistent fold changes.

    Args:
        all_ions (list[[ionnames]] ): contains the ions to be tested
        normed_c1 (ConditionBackground): [description]
        normed_c2 (ConditionBackground): [description]
        ion2diffDist (dict(ion : SubtractedBackground)): [description]
        p2z ([type]): [description]
        deedpair2doublediffdist ([type]): [description]
        fc_threshold (float, optional): [description]. Defaults to 0.3.
        pval_threshold_basis (float, optional): [description]. Defaults to 0.05.
    """
    if len(all_ions)==1:
        return {all_ions[0][0] : 0}

    diffions_idxs = [[x] for x in range(len(all_ions))]
    diffions_fcs = get_fcs_ions(all_ions)
    #mt_corrected_pval_thresh = pval_threshold_basis/len(diffions)
    condensed_distance_matrix = distance.pdist(diffions_idxs, lambda idx1, idx2: evaluate_distance(idx1[0], idx2[0], all_ions, diffions_fcs, normed_c1, normed_c2,ion2diffDist,p2z,deedpair2doublediffdist,fc_threshold,pval_threshold_basis))
    after_clust = hierarchy.complete(condensed_distance_matrix)
    clustered = hierarchy.fcluster(after_clust, 0.1, criterion='distance')
    clustered = exchange_cluster_idxs(clustered)
    ion2clust = { all_ions[ion_idx][0] : clust_idx for ion_idx, clust_idx in zip(list(range(len(clustered))),clustered)}

    return ion2clust

# Cell
from collections import Counter
def propagate_clusters(diffions, ion2cluster):
    """
    Gives basic cluster statistics for sets of ions corresponding to a node
     Args:
        diffions (list[list[ionnames]] ): contains the sets of ions to be tested, for examples [[fragion1_precursor1, fragion2_precursor1, fragion3_precursor1],[fragion1_precursor2],[fragion1_precursor3, fragion2_precursor3]]. The ions are assumed to be similar!
        ion2cluster: given assignment of base ion to cluster
    """

    num_mainclust_elems = 0
    num_mostcommonclust_elems = 0
    ions2clust = {}
    all_clusters = []
    for ions in diffions:
        clusters = []
        for ion in ions:
            clusters.append(ion2cluster.get(ion))
        c = Counter(clusters).most_common(1)
        cluster = c[0][0]
        ions2clust[tuple(ions)] = cluster
        num_mainclust_elems += clusters.count(0)
        num_mostcommonclust_elems += clusters.count(cluster)
        all_clusters.append(cluster)
    c_mostcommon = Counter(all_clusters).most_common(1)
    clust_mostcommon = c_mostcommon[0][0]
    num_mostcommon_clusts = all_clusters.count(clust_mostcommon)
    num_mainclusts = all_clusters.count(0)
    frac_mainclust = num_mainclusts/len(all_clusters)
    frac_mostcommonclust =  num_mostcommon_clusts/len(all_clusters)
    num_clusters = len(set(all_clusters))

    nodeprops = NodeProperties()
    nodeprops.num_clusters = num_clusters
    nodeprops.num_mainclust_elems = num_mainclust_elems
    nodeprops.num_mostcommonclust_elems = num_mostcommonclust_elems
    nodeprops.frac_mainclust = frac_mainclust
    nodeprops.frac_mostcommonclust = frac_mostcommonclust
    nodeprops.num_mainclusts = num_mainclusts
    nodeprops.num_mostcommon_clusts = num_mostcommon_clusts
    nodeprops.mostcommon_clust = clust_mostcommon

    return ions2clust,nodeprops




# Cell
def exchange_cluster_idxs(fclust_output_array):
    """The fcluster output assigns cluster numbers to the clustered elems, e.g. [1,2,1,2,2,2].
    This function here ensures that the numbers follow size of the cluster, e.g. [1,0,1,0,0,0]"""
    clustnum2count = {}
    for clustnum in fclust_output_array:
        clustnum2count[clustnum] = clustnum2count.get(clustnum, 0)+1
    clustnums = list(clustnum2count.keys())
    clustnums.sort(key = lambda x : clustnum2count.get(x), reverse= True)
    clustnum_old2clustnum_new = {clustnums[idx]: idx for idx in range(len(clustnums))}
    return [clustnum_old2clustnum_new.get(clustnum) for clustnum in fclust_output_array]

# Cell
import numpy as np
def get_fcs_ions(diffions):
    fcs = np.ones(len(diffions))
    for idx in range(len(diffions)):
        fc_ions = statistics.mean([ion.fc for ion in diffions[idx]])
        fcs[idx] = fc_ions
    return fcs


# Cell
import statistics
import alphaquant.doublediff_analysis as aqdd
def evaluate_distance(idx1, idx2, diffions, fcs, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold, pval_threshold_basis):
    ions1 = [x.name for x in diffions[idx1]]
    ions2 = [x.name for x in diffions[idx2]]
    fc1 = fcs[idx1]
    fc2 = fcs[idx2]

    if abs((fc1-fc2)) < fc_threshold:
        return 0
    else:
        fcfc, pval = aqdd.calc_doublediff_score(ions1, ions2, normed_c1, normed_c2,ion2diffDist,p2z, deedpair2doublediffdist)
        if pval<pval_threshold_basis:
            return 1
        else:
            return 0


# Cell
import anytree
import re
def create_hierarchical_ion_grouping(regex_patterns, gene_name, diffions):
    #regex patterns sorted from bottom to top in the following way list(list(tuple(pattern, name))): first instance of list represents the level of the tree, second instance represents the different nodes available on this level (for example FRgIon, MS1 are on the same level)

    nodes = [anytree.Node(x.name, type = "base", cluster = -1, is_included = True) for x in diffions]

    for level in regex_patterns:
        name2node = {}
        for pattern2name in level:
            for node in nodes:
                if (re.match(pattern2name[0], node.name)):
                    m = re.match(pattern2name[0], node.name)
                    matching_name = m.group(1)
                    name2node[matching_name] = name2node.get(matching_name, anytree.Node(matching_name,  type = pattern2name[1], cluster = -1, is_included = True))
                    parent_node = name2node.get(matching_name)
                    node.parent = parent_node

        if len(name2node.keys())>0:
            nodes = list(name2node.values())

    root_node = anytree.Node(gene_name, type = "gene", cluster = -1, is_included = True)

    for node in nodes:
        node.parent = root_node

    return root_node

# Cell

def get_ionlist(type_nodes, ionname2diffion):
    ionlist = []
    node2leafs = {}
    for node in type_nodes:
        leafs = [ionname2diffion.get(x.name) for x in node.leaves if x.is_included]
        if len(leafs)>0:
            ionlist.append(leafs)
            node2leafs[node] = leafs
    return ionlist, node2leafs


def update_nodes(type_node, typefilter, type_idx, leafs2clust, node2leafs, node_props):
    num_clusters = node_props.num_clusters
    num_mainclust_elems = node_props.num_mainclust_elems
    num_mostcommonclust_elems = node_props.num_mostcommonclust_elems
    frac_mainclust = node_props.frac_mainclust
    frac_mostcommonclust = node_props.frac_mostcommonclust
    num_mainclusts = node_props.num_mainclusts
    num_mostcommon_clusts = node_props.num_mostcommon_clusts
    mostcommon_clust = node_props.mostcommon_clust



    type_node.num_clusters = num_clusters
    type_node.num_mainclust_elems = num_mainclust_elems
    type_node.frac_mainclust = frac_mainclust
    type_node.frac_mostcommonclust = frac_mostcommonclust
    type_node.num_mostcommonclust_elems = num_mostcommonclust_elems
    type_node.num_mainclusts = num_mainclusts
    type_node.num_mostcommon_clusts = num_mostcommon_clusts
    type_node.mostcommon_clust = mostcommon_clust
    for node in type_node.children:
        if not node.is_included:
            continue
        clustid =  leafs2clust.get(tuple(node2leafs.get(node)))
        node.cluster = clustid
        leafs_included = [x for x in node.leaves if x.is_included]
        no_leafs = len(leafs_included)==0
        wrong_cluster = (clustid!=typefilter.select_cluster[type_idx]) & (typefilter.select_cluster[type_idx] !=-1)
        #wrong_cluster = (clustid!=type_node.mostcommon_clust) & (typefilter.select_cluster[type_idx] ==-1) #all children should belong to the most common cluster

        if wrong_cluster | no_leafs:
            exclude_node(node)

    filtercrit_numclust = (num_clusters !=None) and (num_clusters > typefilter.exclude_if_more_clusters_than[type_idx])
    filtercrit_frac_mainclust = (frac_mainclust!=None) and (frac_mainclust < typefilter.exclude_if_fraction_of_mainclust_smaller_than[type_idx])
    filtercrit_elems_mainclust = (num_mainclust_elems!=None) and(num_mainclust_elems < typefilter.exclude_if_elements_in_mainclust_less_than[type_idx])
    filtercrit_elems_mostcommonclust = (num_mostcommonclust_elems!=None) and(num_mostcommonclust_elems < typefilter.exclude_if_elements_in_mostcommonclust_less_than[type_idx])
    filtercrit_frac_mostcommonclust = (frac_mostcommonclust!=None) and(frac_mostcommonclust < typefilter.exclude_if_frac_mostcommonclust_less_than[type_idx])
    filtercrit_num_mainclusts = (num_mainclusts !=None) and(num_mainclusts < typefilter.exclude_if_num_mainclusts_less_than[type_idx])
    filtercrit_num_mostcommonclusts = (num_mostcommon_clusts !=None) and(num_mostcommon_clusts < typefilter.exclude_if_num_mostcommonclusts_less_than[type_idx])
    no_leafs = len([x for x in node.leaves if x.is_included])==0
    #print("filtercrit_numclust\tfiltercrit_frac_mainclust\tfiltercrit_elems_mainclust\tfiltercrit_elems_mostcommonclust\tfiltercrit_frac_mostcommonclust\tfiltercrit_num_mainclusts\tfiltercrit_num_mostcommonclusts")
    #print(f"{filtercrit_numclust}\t{filtercrit_frac_mainclust}\t{filtercrit_elems_mainclust}\t{filtercrit_elems_mostcommonclust}\t{filtercrit_frac_mostcommonclust}\t{filtercrit_num_mainclusts}\t{filtercrit_num_mostcommonclusts}")

    if filtercrit_numclust | filtercrit_frac_mainclust | filtercrit_elems_mainclust |filtercrit_elems_mostcommonclust| filtercrit_frac_mostcommonclust |filtercrit_num_mainclusts | filtercrit_num_mostcommonclusts | no_leafs :
        exclude_node(type_node)



# Cell

def exclude_node(node):
    node.is_included = False
    for descendant in node.descendants:
        descendant.is_included = False

# Cell
import time
def cluster_along_specified_levels(typefilter, root_node, ionname2diffion, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold = 0.3, pval_threshold_basis = 1e-3):
    #typefilter object specifies filtering and clustering of the nodes
    t_0 = time.time()
    #all_ions = [[ionname2diffion.get(x.name)] for x in root_node.leaves]
    #ion2cluster = find_fold_change_clusters_base_ions(all_ions,normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold, pval_threshold_basis)
    t_1 = time.time()
    for idx in range(len(typefilter.type)):
        type_nodes = anytree.search.findall(root_node, filter_=lambda node: node.type == typefilter.type[idx])
        if len(type_nodes)==0:
            continue
        for type_node in type_nodes:
            child_nodes = type_node.children
            leaflist, node2leafs = get_ionlist(child_nodes, ionname2diffion)
            if len(leaflist)==0:
                exclude_node(type_node)
                continue
            leafs2clust, nodeprops = find_fold_change_clusters(leaflist, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold, pval_threshold_basis) #propagate_clusters(leaflist, ion2cluster)#find_fold_change_clusters(leaflist, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold, pval_threshold_basis)
            update_nodes(type_node, typefilter, idx, leafs2clust, node2leafs, nodeprops)
    t_2 = time.time()
    print(f"t_cluster_baseions: {t_1-t_0}")
    print(f"t_update_nodes: {t_2-t_1}")
    return root_node

# Cell
import anytree
import alphaquant.diff_analysis as aqdiff
import alphaquant.diffquant_utils as aqutils
from scipy.stats import norm
import statistics
import numpy as np

def assign_vals_to_node(zvals, fcs, node):
    z_sum = sum(zvals)
    p_z = norm(0, np.sqrt(len(zvals))).cdf(z_sum)
    z_normed = norm.ppf(p_z)
    if z_normed <-8.2:
        z_normed = -8.2
    if z_normed > 8.2:
        z_normed = 8.2

    p_val = max(1e-16, 2.0 * (1.0 - norm(0, np.sqrt(len(zvals))).cdf(abs(z_sum))))

    node.z_val = z_normed
    node.p_val = p_val
    node.fc = statistics.median(fcs)


def get_diffresults_from_clust_root_node(root_node):
    pval = root_node.p_val
    fc = root_node.fc
    ions_included = [x.name for x in root_node.leaves if x.is_included]
    return pval, fc, ions_included

def get_scored_clusterselected_ions(gene_name, diffions, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold = 0.3, pval_threshold_basis = 1e-5):
    typefilter = TypeFilter('successive')
    regex_patterns = regex_frgions_isotopes
    name2diffion = {x.name : x for x in diffions}
    root_node = create_hierarchical_ion_grouping(regex_patterns, gene_name, diffions)
    #print(anytree.RenderTree(root_node))
    root_node_clust = cluster_along_specified_levels(typefilter, root_node, name2diffion, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, fc_threshold, pval_threshold_basis)
    #print(anytree.RenderTree(root_node_clust))
    level_sorted_nodes = [[node for node in children] for children in anytree.ZigZagGroupIter(root_node_clust)]
    level_sorted_nodes.reverse() #the base nodes are first

    for idx in range(1, len(level_sorted_nodes)):
        nodes = level_sorted_nodes[idx]
        for node in nodes:
            if not node.is_included:
                continue
            if idx ==1: #if we are 1 above base level, we
                leafs_included = [name2diffion.get(x.name) for x in node.leaves if x.is_included]
                zvals = [name2diffion.get(x.name).z_val for x in leafs_included]
                fcs = [name2diffion.get(x.name).fc for x in leafs_included]
            else:
                childs = [x for x in node.children if x.is_included]
                zvals = [x.z_val for x in childs]
                fcs =  [x.fc for x in childs]

            assign_vals_to_node(zvals, fcs,node)

    if len(nodes)!=1:
        Exception("there should be only one root node!")

    root_node_annot = nodes[0]
    return root_node_annot

# Cell
import numpy as np
class TypeFilter():
    def __init__(self, filttype= 'hierarchy'):
        if filttype=='hierarchy':
            self.type = ['frgion', 'ms1_isotopes', 'mod_seq_charge', 'mod_seq', 'seq', 'gene']
            self.select_cluster = [-1,-1,-1,-1,-1,-1,-1]
            self.exclude_if_more_clusters_than = [ np.inf, np.inf, np.inf, np.inf, np.inf, np.inf]
            self.exclude_if_fraction_of_mainclust_smaller_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_frac_mostcommonclust_less_than = [0,0,0,0,0,0]
            self.exclude_if_elements_in_mainclust_less_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_elements_in_mostcommonclust_less_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_num_mainclusts_less_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_num_mostcommonclusts_less_than = [0, 0, 0, 0, 0, 2]
        if filttype == 'only_frgion':
            self.type = ['frgion', 'ms1_isotopes', 'mod_seq_charge', 'mod_seq', 'seq', 'gene']
            self.select_cluster = [0,-1,-1,-1,-1,-1,-1]
            self.exclude_if_more_clusters_than = [ np.inf, np.inf, np.inf, np.inf, np.inf, np.inf]
            self.exclude_if_fraction_of_mainclust_smaller_than = [0, 0, 0.2, 0, 0, 0.3]
            self.exclude_if_frac_mostcommonclust_less_than = [0,0,0,0,0,0]
            self.exclude_if_elements_in_mainclust_less_than = [1, 1, 1, 1, 1, 1]
            self.exclude_if_elements_in_mostcommonclust_less_than = [1, 1, 1, 1, 1, 1]
            self.exclude_if_num_mainclusts_less_than = [1, 1, 1, 1, 1, 1]
            self.exclude_if_num_mostcommonclusts_less_than = [1, 1, 1, 1, 1, 2]
        if filttype=='successive':
            self.type = ['frgion', 'ms1_isotopes', 'mod_seq_charge', 'mod_seq', 'seq', 'gene']
            self.select_cluster = [-1, -1,0,-1,-1,-1,-1]
            self.exclude_if_more_clusters_than = [ np.inf, np.inf, np.inf, np.inf, np.inf, np.inf]
            self.exclude_if_fraction_of_mainclust_smaller_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_frac_mostcommonclust_less_than = [0,0,0,0,0,0]
            self.exclude_if_elements_in_mainclust_less_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_elements_in_mostcommonclust_less_than = [0, 0, 0, 0, 0, 0]
            self.exclude_if_num_mainclusts_less_than = [0, 0, 0, 0, 0, 2]
            self.exclude_if_num_mostcommonclusts_less_than = [0, 0, 0, 0, 0, 0]



# Cell

import numpy as np
class NodeProperties():
    """Helper class to handle node properties"""
    def __init__(self):
        self.num_clusters = None
        self.num_mainclust_elems = None
        self.num_mostcommonclust_elems = None
        self.frac_mainclust = None
        self.frac_mostcommonclust = None
        self.num_mainclusts = None
        self.num_mostcommon_clusts = None
        self.mostcommon_clust = None

# Cell

regex_frgions_only = [[("(SEQ.*MOD.*CHARGE.*FRGION.*)", "frgion")], [("(SEQ.*MOD.*CHARGE.*)(FRGION.*)", "mod_seq_charge")], [("(SEQ.*MOD.*)(CHARGE.*)", "mod_seq")], [("(SEQ.*)(MOD.*)", "seq")]]

regex_frgions_isotopes = [[("(SEQ.*MOD.*CHARGE.*FRGION.*)", "frgion"), ("(SEQ.*MOD.*CHARGE.*MS1ISO.*)", "ms1_isotopes")], [("(SEQ.*MOD.*CHARGE.*)(FRGION.*|MS1ISO.*)", "mod_seq_charge")], [("(SEQ.*MOD.*)(CHARGE.*)", "mod_seq")], [("(SEQ.*)(MOD.*)", "seq")]]



# Cell

import anytree
from anytree.exporter import JsonExporter
import alphaquant.diffquant_utils as aqutils

def export_roots_to_json(rootlist, condpair, results_dir):
    """exports all base roots for a given condition pair to a json file"""
    condpairname = aqutils.get_condpairname(condpair)
    condpair_node = anytree.Node(condpair) #set the condpair as node and export the whole condpair as one tree
    for root in rootlist:
        root.parent = condpair_node
    results_file = f"{results_dir}/{condpairname}.iontrees.json"

    j_exporter = JsonExporter(indent=2, sort_keys=True)
    filehandle = open(results_file, "w")
    j_exporter.write(condpair_node, filehandle)
    filehandle.close()


