# AUTOGENERATED! DO NOT EDIT! File to edit: 09_cluster_ions.ipynb (unless otherwise specified).

__all__ = ['find_fold_change_clusters', 'exchange_cluster_idxs', 'decide_cluster_order',
           'get_score_mapping_consistency_score', 'get_score_mapping_num_clustelems', 'reformat_to_childnode2clust',
           'order_by_score', 'get_fcs_ions', 'evaluate_distance', 'create_hierarchical_ion_grouping', 'get_ionlist',
           'get_leafs', 'exclude_node', 'cluster_along_specified_levels', 'get_mainclust_leaves',
           'annotate_mainclust_leaves', 'assign_cluster_number', 'assign_vals_to_node',
           'get_feature_numpy_array_from_nodes', 'filter_fewpeps_per_protein', 'set_bounds_for_p_if_too_extreme',
           'get_median_peptides', 'select_predscore_with_minimum_absval', 'get_diffresults_from_clust_root_node',
           'get_scored_clusterselected_ions', 'assign_fcs_to_base_ions', 'update_nodes_w_ml_score',
           're_order_depending_on_predscore', 're_order_clusters_by_predscore', 'TypeFilter',
           'globally_initialized_typefilter', 'NodeProperties', 'regex_frgions_only', 'regex_frgions_isotopes',
           'export_roots_to_json']

# Cell
import scipy.spatial.distance as distance
import scipy.cluster.hierarchy as hierarchy

def find_fold_change_clusters(typenode, diffions, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold, take_median_ion):
    """Compares the fold changes of the ions corresponding to the nodes that are compared and returns the set of ions with consistent fold changes.

    Args:
        diffions (list[list[ionnames]]): contains the sets of ions to be tested, for example [[fragion1_precursor1, fragion2_precursor1, fragion3_precursor1],[fragion1_precursor2],[fragion1_precursor3, fragion2_precursor3]]. The ions are assumed to be similar in type (e.g. fragment, precursor)!
        normed_c1 (ConditionBackground): [description]
        normed_c2 (ConditionBackground): [description]
        ion2diffDist (dict(ion : SubtractedBackground)): [description]
        p2z ([type]): [description]
        deedpair2doublediffdist ([type]): [description]
        fc_threshold (float, optional): [description]. Defaults to 0.3.
        pval_threshold_basis (float, optional): [description]. Defaults to 0.05.
    """

    if len(diffions)==1:
        typenode.num_clusters = 1
        typenode.num_mainclusts = 1
        typenode.frac_mainclust = 1
        return [(typenode.children[0], 0)]

    diffions_idxs = [[x] for x in range(len(diffions))]
    diffions_fcs = get_fcs_ions(diffions)
    #mt_corrected_pval_thresh = pval_threshold_basis/len(diffions)
    condensed_distance_matrix = distance.pdist(diffions_idxs, lambda idx1, idx2: evaluate_distance(idx1[0], idx2[0], diffions, diffions_fcs, normed_c1, normed_c2, ion2diffDist,p2z,deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold, take_median_ion))
    after_clust = hierarchy.complete(condensed_distance_matrix)
    clustered = hierarchy.fcluster(after_clust, 0.1, criterion='distance')
    clustered = exchange_cluster_idxs(clustered)
    typenode.num_clusters = len(set(clustered))
    typenode.num_mainclusts = sum([x==0 for x in clustered])
    typenode.frac_mainclust = typenode.num_mainclusts/len(clustered)

    childnode2clust = [(typenode.children[ion_idx],clust_idx) for ion_idx, clust_idx in zip(list(range(len(clustered))),clustered)]
    childnode2clust = sorted(childnode2clust, key = lambda x : x[0].name) #sort list for reproducibility

    return childnode2clust

# Cell
def exchange_cluster_idxs(fclust_output_array):
    """The fcluster output assigns cluster numbers to the clustered elems, e.g. [1,2,1,2,2,2].
    This function here ensures that the numbers follow size of the cluster, e.g. [1,0,1,0,0,0]"""
    clustnum2count = {}
    for clustnum in fclust_output_array:
        clustnum2count[clustnum] = clustnum2count.get(clustnum, 0)+1
    clustnums = list(clustnum2count.keys())
    clustnums.sort(key = lambda x : clustnum2count.get(x), reverse= True)
    clustnum_old2clustnum_new = {clustnums[idx]: idx for idx in range(len(clustnums))}
    return [clustnum_old2clustnum_new.get(clustnum) for clustnum in fclust_output_array]

# Cell
def decide_cluster_order(node, childnode2clust_init):
    """ranks the clusters from 0 to n (with 0 being the best) depending on the properties/similarities of the child nodes contained in each cluster
    """
    childnode2clust = order_by_score(childnode2clust_init,node, score_mapping_function=get_score_mapping_consistency_score)

    return childnode2clust

def get_score_mapping_consistency_score(childnode2clust):
    clust2score = {}
    clust2childnodes = {}
    for childnode,clust in childnode2clust:
        clust2score[clust] = clust2score.get(clust, 0) + childnode.fraction_consistent*len(childnode.leaves)
        clust2childnodes[clust] = clust2childnodes.get(clust, []) + [childnode]
    return clust2score, clust2childnodes

def get_score_mapping_num_clustelems(childnode2clust):
    clust2score = {}
    clust2childnodes = {}
    for childnode,clust in childnode2clust:
        clust2score[clust] = clust2score.get(clust, 0) +1
        clust2childnodes[clust] = clust2childnodes.get(clust, []) + [childnode]
    return clust2score, clust2childnodes

def reformat_to_childnode2clust(id2score2childnodes):
    childnode2clust = {}
    for clust_idx_new in range(len(id2score2childnodes)): #the new cluster has been determined by the sorting
        for childnode in id2score2childnodes[clust_idx_new][2]:
            childnode2clust[childnode] = clust_idx_new
    return childnode2clust

def order_by_score(childnode2clust_init, node, score_mapping_function, sort_descending_by_score = True):
    clust2score, clust2childnodes = score_mapping_function(childnode2clust_init)

    id2score2childnodes = []
    for clust in clust2score.keys():
        score = clust2score.get(clust)
        childnodes = clust2childnodes.get(clust)
        id = childnodes[0].name
        id2score2childnodes.append((id, score, childnodes))

    id2score2childnodes = sorted(id2score2childnodes, key= lambda x : x[0])#sort by id (to ensure reproducibility)
    id2score2childnodes = sorted(id2score2childnodes, key= lambda x : x[1], reverse= sort_descending_by_score)#then sort by score
    node.clustscore = id2score2childnodes[0][1] #annotate the parent of the childnodes with the score of the main cluster
    childnode2clust = reformat_to_childnode2clust(id2score2childnodes)

    return childnode2clust


# Cell
import numpy as np
def get_fcs_ions(diffions):
    fcs = np.ones(len(diffions))
    for idx in range(len(diffions)):
        fc_ions = np.nanmedian([ion.fc for ion in diffions[idx]])
        fcs[idx] = fc_ions
    return fcs

# Cell
import statistics
import alphaquant.doublediff_analysis as aqdd
import numpy as np
def evaluate_distance(idx1, idx2, diffions, fcs, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold,  take_median_ion):
    ions1 = [x.name for x in diffions[idx1]]
    ions2 = [x.name for x in diffions[idx2]]
    fc1 = fcs[idx1]
    fc2 = fcs[idx2]

    if abs((fc1-fc2)) < fcfc_threshold:
        return 0

    if take_median_ion:
        fcs_ions1 = [x.fc for x in diffions[idx1]]
        fcs_ions2 = [x.fc for x in diffions[idx2]]
        idx_ions1 = np.argsort(fcs_ions1)[len(fcs_ions1)//2]
        idx_ions2 = np.argsort(fcs_ions2)[len(fcs_ions2)//2]
        ions1 = [ions1[idx_ions1]]
        ions2 = [ions2[idx_ions2]]

    fcfc, pval = aqdd.calc_doublediff_score(ions1, ions2, normed_c1, normed_c2,ion2diffDist,p2z, deedpair2doublediffdist)
    if (pval<pval_threshold_basis) & (abs(fcfc) > fcfc_threshold):
        return 1
    else:
        return 0

# Cell
import anytree
import re
def create_hierarchical_ion_grouping(regex_patterns, gene_name, diffions):
    #regex patterns sorted from bottom to top in the following way list(list(tuple(pattern, name))): first instance of list represents the level of the tree, second instance represents the different nodes available on this level (for example FRgIon, MS1 are on the same level)

    nodes = [anytree.Node(x.name, type = "base", cluster = -1, is_included = True) for x in diffions]

    for level in regex_patterns:
        name2node = {}
        for pattern2name in level:
            for node in nodes:
                if (re.match(pattern2name[0], node.name)):
                    m = re.match(pattern2name[0], node.name)
                    matching_name = m.group(1)
                    name2node[matching_name] = name2node.get(matching_name, anytree.Node(matching_name,  type = pattern2name[1], cluster = -1, is_included = True))
                    parent_node = name2node.get(matching_name)
                    node.parent = parent_node

        if len(name2node.keys())>0:
            nodes = list(name2node.values())

    root_node = anytree.Node(gene_name, type = "gene", cluster = -1, is_included = True)

    for node in nodes:
        node.parent = root_node

    return root_node

# Cell

def get_ionlist(type_nodes, ionname2diffion, select_mainclust_ions):
    ionlist = []
    node2leafs = {}
    for node in type_nodes:
        leafs = get_leafs(node, ionname2diffion, select_mainclust_ions)
        if len(leafs)>0:
            ionlist.append(leafs)
            node2leafs[node] = leafs

    return ionlist, node2leafs

def get_leafs(node, ionname2diffion,select_mainclust_ions):
    """Returns all the leafs (i.e. ions) that belong to the node. With the option to only include those that were in the main cluster of the child nodes

    Args:
        node ([type]): [description]
        ionname2diffion ([type]): [description]
        select_mainclust_ions ([type]): [description]

    Returns:
        [type]: [description]
    """
    if node.is_leaf:
        return [ionname2diffion.get(node.name)]
    leafs = []
    for child in node.children:
        if select_mainclust_ions & (child.cluster!=0):
            continue
        leafs.extend([ionname2diffion.get(x.name) for x in child.leaves if x.is_included])

    return leafs




# Cell
import anytree
def exclude_node(node):
    node.is_included = False
    for descendant in node.descendants:
        descendant.is_included = False

# Cell
import pickle
import pandas as pd
def cluster_along_specified_levels(typefilter, root_node, ionname2diffion, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold, take_median_ion):#~60% of overall runtime
    #typefilter object specifies filtering and clustering of the nodes
    assign_fcs_to_base_ions(root_node, ionname2diffion, normed_c1, normed_c2)

    for idx in range(len(typefilter.type)):
        type_nodes = anytree.search.findall(root_node, filter_=lambda node: node.type == typefilter.type[idx])

        if len(type_nodes)==0:
            continue
        for type_node in type_nodes:
            child_nodes = type_node.children
            leaflist = get_mainclust_leaves(child_nodes, ionname2diffion)
            if len(leaflist)==0:
                exclude_node(type_node)
                continue
            childnode2clust = find_fold_change_clusters(type_node,leaflist, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold, take_median_ion) #the clustering is performed on the child nodes
            childnode2clust = decide_cluster_order(type_node,childnode2clust)
            annotate_mainclust_leaves(childnode2clust)
            assign_cluster_number(type_node, childnode2clust)
            assign_vals_to_node(type_node,only_use_mainclust=True, use_fewpeps_per_protein=True)

    return root_node

# Cell

def get_mainclust_leaves(child_nodes, ionname2diffion):
    grouped_leafs = []
    for child in child_nodes:
        child_leaves_mainclust = []
        types_previous_level = {x.type for x in child.children}
        for leafnode in child.leaves:#go through the leafs of each child
            if hasattr(leafnode, 'inclusion_levels') and not (leafnode.inclusion_levels[-1] in types_previous_level):
                continue
            child_leaves_mainclust.append(leafnode)
        child_leafs_diffions = [ionname2diffion.get(x.name) for x in child_leaves_mainclust] #map the leaf names to the diffion objetcs
        if len(child_leafs_diffions)>0:
            grouped_leafs.append(child_leafs_diffions)
    return grouped_leafs



# Cell
def annotate_mainclust_leaves(childnode2clust):
    #annotate each leaf that has reached the current level with the level name, allows to visualize how the leafs are propagated
    for child in childnode2clust.keys():
        if childnode2clust.get(child)!=0:
            continue
        types_previous_level = {x.type for x in child.children}
        for leafnode in child.leaves:#annotate the leaves of each node, if they were included at this level
            if hasattr(leafnode, 'inclusion_levels'):

                if leafnode.inclusion_levels[-1] in types_previous_level: #only add a level if the previous level has also been included
                    leafnode.inclusion_levels.append(child.type)
            else:
                leafnode.inclusion_levels = [child.type]

# Cell

def assign_cluster_number(type_node, childnode2clust):
    for node in type_node.children:
        if not node.is_included:
            continue
        clustid =  childnode2clust.get(node)
        node.cluster = clustid

# Cell
import anytree
import alphaquant.diff_analysis as aqdiff
import alphaquant.diffquant_utils as aqutils
from statistics import NormalDist
import statistics
import numpy as np

def assign_vals_to_node(node, only_use_mainclust, use_fewpeps_per_protein):
    """Goes through the children and summarizes their properties to the node

    Args:
        node ([type]): [description]
        only_use_mainclust (bool, optional): [description]. Defaults to True.
    """

    if only_use_mainclust:
        childs = [x for x in node.children if x.is_included & (x.cluster ==0)]
    else:
        childs = [x for x in node.children if x.is_included]

    if use_fewpeps_per_protein and node.type == "gene":
        childs = filter_fewpeps_per_protein(childs)


    zvals = get_feature_numpy_array_from_nodes(nodes=childs, feature_name="z_val")
    fcs =  get_feature_numpy_array_from_nodes(nodes=childs, feature_name="fc")
    cvs = get_feature_numpy_array_from_nodes(nodes=childs, feature_name="cv")
    min_intensities = get_feature_numpy_array_from_nodes(nodes = childs, feature_name = "min_intensity")
    min_intensity = np.median(min_intensities)
    min_reps_childs = get_feature_numpy_array_from_nodes(nodes = childs, feature_name = "min_reps")
    min_reps = np.median(min_reps_childs)
    if np.isnan(min_intensity) or np.isnan(min_reps):
        Exception("values could not be determined!")

    fraction_consistent = sum([x.fraction_consistent/len(node.children) for x in childs if x.cluster ==0])



    z_sum = sum(zvals)
    p_z = NormalDist(mu = 0, sigma = np.sqrt(len(zvals))).cdf(z_sum)
    p_z = set_bounds_for_p_if_too_extreme(p_z)
    z_normed = NormalDist(mu = 0, sigma=1).inv_cdf(p_z)
    if z_normed <-8.3:
        Exception("not in alignment with bounded pval")
    if z_normed > 8.3:
        Exception("not in alignment with bounded pval")

    p_val = max(1e-16, 2.0 * (1.0 - NormalDist(mu = 0, sigma = np.sqrt(len(zvals))).cdf(abs(z_sum))))

    node.z_val = z_normed
    node.p_val = p_val
    node.fc = np.median(fcs)
    node.fraction_consistent = fraction_consistent
    node.cv = min(cvs)
    node.min_intensity = min_intensity
    node.min_reps = min_reps

    if hasattr(node.children[0], 'predscore'):
        predscores = [x.predscore for x in childs]
        node.predscore = select_predscore_with_minimum_absval(predscores)
        node.cutoff = childs[0].cutoff
        node.ml_excluded = bool(abs(node.predscore)> node.cutoff)

def get_feature_numpy_array_from_nodes(nodes, feature_name ,dtype = np.float):
    generator = (x.__dict__.get(feature_name) for x in nodes)
    return np.fromiter(generator, dtype=dtype)

def filter_fewpeps_per_protein(peptide_nodes):
    peps_filtered = []
    pepnode2pval2numleaves = []
    for pepnode in peptide_nodes:
        pepleaves = [x for x in pepnode.leaves if "seq" in x.inclusion_levels]
        pepnode2pval2numleaves.append((pepnode, pepnode.p_val,len(pepleaves)))
    pepnode2pval2numleaves = sorted(pepnode2pval2numleaves, key=lambda x : x[1], reverse=True) #sort with highest p-val (least significant) first

    return get_median_peptides(pepnode2pval2numleaves)


def set_bounds_for_p_if_too_extreme(p_val):
    if p_val <1e-16:
        return 1e-16
    elif p_val > 1-(1e-16):
        return 1- (1e-16)
    else:
        return p_val

import math
def get_median_peptides(pepnode2pval2numleaves):
    median_idx = math.floor(len(pepnode2pval2numleaves)/2)
    if len(pepnode2pval2numleaves)<3:
        return [x[0] for x in pepnode2pval2numleaves]
    else:
        return [x[0] for x in pepnode2pval2numleaves[:median_idx+1]]

def select_predscore_with_minimum_absval(predscores):
    abs_predscores = [abs(x) for x in predscores]
    min_value = min(abs_predscores)
    min_index = abs_predscores.index(min_value)
    return predscores[min_index]


def get_diffresults_from_clust_root_node(root_node):
    pval = root_node.p_val
    fc = root_node.fc
    ions_included = [x.name for x in root_node.leaves if x.is_included]
    consistency_score = root_node.fraction_consistent * len(root_node.leaves)
    return pval, fc, consistency_score, ions_included

def get_scored_clusterselected_ions(gene_name, diffions, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold, take_median_ion):
    #typefilter = TypeFilter('successive')

    regex_patterns = regex_frgions_isotopes
    name2diffion = {x.name : x for x in diffions}
    root_node = create_hierarchical_ion_grouping(regex_patterns, gene_name, diffions)
    #print(anytree.RenderTree(root_node))
    root_node_clust = cluster_along_specified_levels(globally_initialized_typefilter, root_node, name2diffion, normed_c1, normed_c2, ion2diffDist, p2z, deedpair2doublediffdist, pval_threshold_basis, fcfc_threshold, take_median_ion)
    #print(anytree.RenderTree(root_node_clust))
    level_sorted_nodes = [[node for node in children] for children in anytree.ZigZagGroupIter(root_node_clust)]
    level_sorted_nodes.reverse() #the base nodes are first

    # for idx in range(0, len(level_sorted_nodes)):
    #     nodes = level_sorted_nodes[idx]
    #     if idx==0:
    #         assign_fcs_to_base_ions(nodes, name2diffion)
    #         continue
    #     for node in nodes:
    #         if not node.is_included:
    #             continue
    #         assign_vals_to_node(node, idx, name2diffion)
    root_node_lvl = level_sorted_nodes[-1]
    if len(root_node_lvl)!=1:
        Exception("there should be only one root node!")

    root_node_annot =root_node_lvl[0]
    return root_node_annot

import scipy.stats
def assign_fcs_to_base_ions(root_node, name2diffion, normed_c1, normed_c2):
    for leaf in root_node.leaves:
        leaf.fc = name2diffion.get(leaf.name).fc
        leaf.z_val = name2diffion.get(leaf.name).z_val
        leaf.fraction_consistent = 1
        original_intensities_c1 = 2**(normed_c1.ion2nonNanvals.get(leaf.name))
        original_intensities_c2 = 2**(normed_c2.ion2nonNanvals.get(leaf.name))
        cv_c1 = scipy.stats.variation(original_intensities_c1)
        cv_c2 = scipy.stats.variation(original_intensities_c2)
        leaf.cv = min(cv_c1, cv_c2)
        leaf.min_intensity = min(sum(original_intensities_c1)/len(original_intensities_c1), sum(original_intensities_c2)/len(original_intensities_c2))
        leaf.min_reps = min(len(normed_c1.ion2nonNanvals.get(leaf.name)), len(normed_c2.ion2nonNanvals.get(leaf.name)) )

# Cell
import numpy as np
def update_nodes_w_ml_score(protnodes):
    typefilter = globally_initialized_typefilter
    for prot in protnodes:
        re_order_depending_on_predscore(prot, typefilter)


def re_order_depending_on_predscore(protnode, typefilter):
    for idx in range(len(typefilter.type)):
        type_nodes = anytree.search.findall(protnode, filter_=lambda node: node.type == typefilter.type[idx])
        if len(type_nodes)==0:
            continue
        for type_node in type_nodes: #go through the nodes, re-order the children. Propagate the values from the newly ordered children to the type node
            child_nodes = type_node.children
            had_predscore = hasattr(child_nodes[0], 'predscore')
            if had_predscore:
                re_order_clusters_by_predscore(child_nodes)
                assign_vals_to_node(type_node,only_use_mainclust=True, use_fewpeps_per_protein=True)



def re_order_clusters_by_predscore(nodes):
    cluster2scores = {}
    for node in nodes:
        cluster2scores[node.cluster] = cluster2scores.get(node.cluster, [])
        cluster2scores[node.cluster].append(abs(node.predscore))
    clusters = list(cluster2scores.keys())
    clusters.sort(key = lambda x : np.nanmin(cluster2scores.get(x)))
    clust2newclust = { clusters[x] :x for x in range(len(clusters))}
    for node in nodes:
        node.cluster =clust2newclust.get(node.cluster)

# Cell
import numpy as np
class TypeFilter():
    def __init__(self, filttype= 'default'):
        if filttype=='default':
            self.type = ['frgion', 'ms1_isotopes', 'mod_seq_charge', 'mod_seq', 'seq', 'gene']
            self.mapping_dict = {'SEQ':'seq', 'MOD':'mod_seq', 'CHARGE':'mod_seq_charge', 'MS1ISOTOPES':'ms1_isotopes','FRGION':'frgion'}

globally_initialized_typefilter = TypeFilter()

# Cell

import numpy as np
class NodeProperties():
    """Helper class to handle node properties"""
    def __init__(self):
        self.num_clusters = None
        self.num_mainclust_elems = None
        self.num_mostcommonclust_elems = None
        self.frac_mainclust = None
        self.frac_mostcommonclust = None
        self.num_mainclusts = None
        self.num_mostcommon_clusts = None
        self.mostcommon_clust = None

# Cell

regex_frgions_only = [[("(SEQ.*MOD.*CHARGE.*FRGION.*)", "frgion")], [("(SEQ.*MOD.*CHARGE.*)(FRGION.*)", "mod_seq_charge")], [("(SEQ.*MOD.*)(CHARGE.*)", "mod_seq")], [("(SEQ.*)(MOD.*)", "seq")]]


regex_frgions_isotopes = [[("(SEQ.*MOD.*CHARGE.*FRG)(ION.*)", "frgion"), ("(SEQ.*MOD.*CHARGE.*MS1)(ISO.*)", "ms1_isotopes")], [("(SEQ.*MOD.*CHARGE.*)(FRG.*|MS1.*)", "mod_seq_charge")], [("(SEQ.*MOD.*)(CHARGE.*)", "mod_seq")], [("(SEQ.*)(MOD.*)", "seq")]]

# Cell

import anytree
from anytree.exporter import JsonExporter
import alphaquant.diffquant_utils as aqutils

def export_roots_to_json(rootlist, condpair, results_dir):
    """exports all base roots for a given condition pair to a json file"""
    condpairname = aqutils.get_condpairname(condpair)
    condpair_node = anytree.Node(condpair) #set the condpair as node and export the whole condpair as one tree
    for root in rootlist:
        root.parent = condpair_node
    results_file = f"{results_dir}/{condpairname}.iontrees.json"

    j_exporter = JsonExporter(indent=2, sort_keys=True)
    filehandle = open(results_file, "w")
    j_exporter.write(condpair_node, filehandle)
    filehandle.close()