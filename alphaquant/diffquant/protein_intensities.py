# AUTOGENERATED! DO NOT EDIT! File to edit: 06_protein_intensities.ipynb (unless otherwise specified).

__all__ = ['run_protein_normalization', 'estimate_protein_intensities', 'plot_lines', 'plot_points']

# Cell
from .background_distributions import *
from ..norm.normalization import *
from .diff_analysis import *
from ..plotting.base_functions import *
from ..benchm.benchmarking import *
from .diffutils import *
from ..run_pipeline import read_tables

# Cell
import pandas as pd
import numpy as np
import alphaquant.norm.normalization as aqnorm


import alphaquant.config.config as aqconfig
import logging
aqconfig.setup_logging()
LOGGER = logging.getLogger(__name__)

def run_protein_normalization(input_file, protein_header, ion_header):
    input_df = pd.read_csv(input_file, sep = "\t")
    input_df = input_df.set_index([protein_header, ion_header])
    input_df = input_df.replace(0, np.nan)
    input_df = np.log2(input_df)
    sample2shift = aqnorm.get_normfacts_withincond(input_df.to_numpy().T)
    normed = aqnorm.apply_sampleshifts(input_df.to_numpy().T, sample2shift)
    betweencond_normed = pd.DataFrame(normed.T, index = input_df.index, columns= input_df.columns)
    protnormed_df, ionnormed_df = estimate_protein_intensities(betweencond_normed)
    protnormed_df.to_csv(f"{input_file}.proteins.out", sep = "\t")
    ionnormed_df.to_csv(f"{input_file}.ions.out", sep = "\t")


# Cell
import alphaquant.norm.normalization as aqnorm
def estimate_protein_intensities(normed_df):
    prot_ints = []
    ion_ints = []

    count_prots = 0
    idx = normed_df.index.get_level_values(0)
    idx_ions = normed_df.index.get_level_values(1)
    allprots = idx.unique()
    for protein in allprots:
        if(count_prots%100 ==0):
            LOGGER.info(f"prot {count_prots} of {len(allprots)}")
        count_prots+=1

        protvals_df = pd.DataFrame(normed_df.loc[protein])

        protvals = protvals_df.to_numpy().copy()
        summed_pepints = np.nansum(2**protvals)
        if(protvals.shape[1]<2):
            normed_protvals = protvals
        else:
            sample2shift = aqnorm.get_normfacts_withincond(protvals)
            normed_protvals = aqnorm.apply_sampleshifts(protvals, sample2shift)

        sample2reps = normed_protvals.T

        intens_vec = []
        for sample_idx in range(len(sample2reps)):
            reps = np.array(sample2reps[sample_idx])
            nonan_elems = sum(~np.isnan(reps))
            if(nonan_elems>=1):
                intens_vec.append(np.nanmedian(reps))
            else:
                intens_vec.append(np.nan)

        intens_vec = np.array(intens_vec)
        intens_conversion_factor = summed_pepints/np.nansum(2**intens_vec)
        scaled_vec = intens_vec+np.log2(intens_conversion_factor)
        prot_ints.append(scaled_vec)
        ion_ints.extend(normed_protvals)

    protein_df = 2**pd.DataFrame(prot_ints, index = allprots, columns = normed_df.columns)
    protein_df = protein_df.replace(np.nan, 0)
    ion_df = 2**pd.DataFrame(ion_ints, index = normed_df.index, columns = normed_df.columns)
    ion_df = ion_df.replace(np.nan, 0)
    return protein_df, ion_df

# Cell
import matplotlib.pyplot as plt
import numpy as np
def plot_lines(protvals, log = True):
    colors = plt.cm.tab20c(np.linspace(0,1,protvals.shape[0]))
    #cmap = plt.get_cmap("tab20c")
    idx = 0
    for row in protvals:
        if not log:
            row = 2**row
        plt.plot(row, c= colors[idx])
        idx+=1
    median_row = np.nanmedian(protvals, axis=0)
    print(median_row)
    plt.plot(median_row, c = 'black',linewidth =3 )
    plt.show()

def plot_points(protvals, log = True):
    colors = plt.cm.tab20c(np.linspace(0,1,protvals.shape[0]))
    #cmap = plt.get_cmap("tab20c")
    idx = 0
    for row in protvals:
        if not log:
            row = 2**row
        x_coord = list(range(len(row)))
        plt.scatter(x_coord,row, c= colors[idx])
        idx+=1

    plt.show()