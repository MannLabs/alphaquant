# AUTOGENERATED! DO NOT EDIT! File to edit: 15_outlier_scoring.ipynb (unless otherwise specified).

__all__ = ['OutlierHandler', 'ProtnodeClusterChecker', 'ClusterInfo', 'ClusterDiffInfo', 'OutlierPeptideLoader',
           'ProtnodeClusterCheckerPeptideInfos', 'ProteinInfo', 'OutlierPeptideInfo', 'ModifiedPeptideLoader',
           'PeptideWithSpecificModification', 'ComplementedClusterLoader', 'ComplementedCluster',
           'ComplementedClusterEvaluator']

# Cell
import alphaquant.diffquant_utils as aqutils
import numpy as np
import copy
import anytree

class OutlierHandler():
    def __init__(self, results_dir, cond1, cond2):
        self._protnodes = self.__load_protein_nodes__(results_dir, cond1, cond2)

    def __load_protein_nodes__(self, results_dir, cond1, cond2):
        return aqutils.read_condpair_tree(results_folder=results_dir, cond1=cond1, cond2 = cond2).children

    def get_diffclust_overview_list(self):
        """_summary_

        Returns:
            ClusterDiffInfo: object containing the relevant information about two differing clusters (fcfc, peptides),
            can "reduce" protein nodes to the cluster-relevant peptides
        """
        diffclusts = []
        counter = 0
        for protnode in self._protnodes:
            counter+=1
            cluster_checker = ProtnodeClusterChecker(protnode)
            diffclusts += cluster_checker.get_diffclusts()
        return diffclusts


class ProtnodeClusterChecker():
    def __init__(self, protnode):
        self._protnode = protnode
        self._num_clusters = protnode.num_clusters

    def get_diffclusts(self):
        if not self.__check_if_multiple_clusters__():
            return []
        return self.__get_clusterdiff_handler_for_each_cluster__()

    def __get_clusterdiff_handler_for_each_cluster__(self):
        protnodes = []
        mainclust_info= self.__get_cluster_info__(clustnum = 0)
        for clustnum in range(1, self._num_clusters):
            outlier_info = self.__get_cluster_info__(clustnum)
            protnodes.append(self.__get_clusterdiff_info__(outlier_info, mainclust_info))
        return protnodes

    def __get_cluster_info__(self, clustnum):
        mainclust_peptides = self.__get_peptides_of_cluster__(clustnum)
        return ClusterInfo(protein_name=self._protnode.name,peptide_nodes = mainclust_peptides)

    def __get_clusterdiff_info__(self, outlier_info, mainclust_info):
        return ClusterDiffInfo(mainclust_info, outlier_info)

    def __get_peptides_of_cluster__(self, clustnum):
        return [x for x in self._protnode.children if x.cluster == clustnum]

    def __check_if_multiple_clusters__(protein_node):
        return protein_node._num_clusters >1


class ClusterInfo():
    def __init__(self, protein_name,peptide_nodes):
        self.protein_name = protein_name
        self.cluster_number = list({x.cluster for x in peptide_nodes})[0]
        self.peptide_names = [x.name for x in peptide_nodes]
        self.median_fc = np.median(np.array([x.fc for x in peptide_nodes]))
        self.quality_score = self._get_minimum_predscore(peptide_nodes)

    @staticmethod
    def _get_minimum_predscore(peptide_nodes):
        if hasattr(peptide_nodes[0], 'predscore'):
            return min([abs(x.predscore) for x in peptide_nodes])
        else:
            return min(1/x.fraction_consistent for x in peptide_nodes)

class ClusterDiffInfo():
    def __init__(self, mainclust_info, outlier_info):
        self.protein_name = mainclust_info.protein_name
        self.clusterpair_id = f"{mainclust_info.cluster_number}_{outlier_info.cluster_number}"
        self.name = f"{self.protein_name}_{self.clusterpair_id}"
        self.fcdiff = abs(mainclust_info.median_fc - outlier_info.median_fc)
        self.quality_score = max(mainclust_info.quality_score, outlier_info.quality_score)
        self.outlier_peptide_names = outlier_info.peptide_names
        self.peptide_names = mainclust_info.peptide_names + outlier_info.peptide_names

    def get_clusterdiff_protnode(self, protnode):
        protnode_clusterdiff = copy.deepcopy(protnode)
        self.__remove_peptides_not_in_cluster__(protnode_clusterdiff)
        self.__add_diffinfos__(protnode_clusterdiff)
        return protnode_clusterdiff

    def __remove_peptides_not_in_cluster__(self, protnode_clusterdiff):
        for peptide_node in protnode_clusterdiff.children:
            self.__remove_peptide_if_necessary__(peptide_node)

    def __add_diffinfos__(self, protnode):
        protnode.fcdiff = self.fcdiff
        protnode.quality_score = self.quality_score
        protnode.peptide_names = self.peptide_names

    def __remove_peptide_if_necessary__(self, peptide_node):
        if peptide_node.name not in self.peptide_names:
            peptide_node.parent = None




# Cell

class OutlierPeptideLoader():
    def __init__(self, condpair_tree):
        self._condpair_tree = condpair_tree
        self._outlier_peptides = []

    def get_outlier_peptides(self):
        for protnode in self._condpair_tree.children:
            nodechecker = ProtnodeClusterCheckerPeptideInfos(protnode)
            self._outlier_peptides += nodechecker.get_outlier_peptide_infos()
        return self._outlier_peptides


class ProtnodeClusterCheckerPeptideInfos(ProtnodeClusterChecker):
    def __init__(self, protnode):
        super().__init__(protnode)
        self._outlier_peptide_infos = []

    def get_outlier_peptide_infos(self):
        diffclusts = self.get_diffclusts()
        for clusterdiffinfo in diffclusts:
            self._update_outlier_peptide_infos(clusterdiffinfo)
        return self._outlier_peptide_infos

    def _update_outlier_peptide_infos(self, clusterdiffinfo):
        peptide_nodes = self._get_outlier_peptide_nodes(clusterdiffinfo)
        for peptide_node in peptide_nodes:
            self._outlier_peptide_infos.append(OutlierPeptideInfo(peptide_node))

    def _get_outlier_peptide_nodes(self, clusterdiffinfo):
        peptide_names = set(clusterdiffinfo.outlier_peptide_names)
        return anytree.findall(self._protnode, filter_= lambda x : x.name in peptide_names, maxlevel=2)


class ProteinInfo():
    def __init__(self, peptide_node):
        self.protein_fc = self._get_protein_fc(peptide_node)

    def _get_protein_fc(self, peptide_node):
        return aqutils.find_node_parent_at_level(peptide_node, "gene").fc


class OutlierPeptideInfo(ProteinInfo):
    def __init__(self, peptide_node):
        super().__init__(peptide_node)
        self.peptide_sequence = peptide_node.name
        self.fc = peptide_node.fc
        self.quality_score = self._get_quality_score(peptide_node)
        self.protnormed_fc = None
        self._calc_protnormed_fc()

    def _get_quality_score(self, peptide_node):
        has_predscore = hasattr(peptide_node, 'predscore')
        if hasattr(peptide_node, 'predscore'):
            return abs(peptide_node.predscore)
        else:
            return peptide_node.fraction_consistent


    def _calc_protnormed_fc(self):
        self.protnormed_fc = self.fc - self.protein_fc



# Cell
import anytree


class ModifiedPeptideLoader():
    def __init__(self, condpair_tree, specific_modification = "[Phospho (STY)]"):
        self.specific_modification = specific_modification
        self.condpair_tree = condpair_tree
        self._pepname2modpep = {}
        self._load_modified_peptides_from_tree()

    def get_modpep_from_sequence(self, peptide_sequence):
        return self._pepname2modpep.get(peptide_sequence)

    def _load_modified_peptides_from_tree(self):
        modified_pepnodes = self._get_modified_peptide_nodes()
        for mod_pep_node in modified_pepnodes:
            self._update_pepname2modpep(mod_pep_node)

    def _get_modified_peptide_nodes(self):
        return anytree.search.findall(self.condpair_tree, lambda x : getattr(x,'type',"") == 'mod_seq', maxlevel=4)

    def _update_pepname2modpep(self, mod_pep_node):
        modified_peptide = PeptideWithSpecificModification(mod_pep_node, self.specific_modification)
        if modified_peptide.specific_modification_found:
            self._pepname2modpep[modified_peptide.peptide_sequence] = modified_peptide


class PeptideWithSpecificModification(OutlierPeptideInfo):
    def __init__(self, node_modpeptide, specific_modification= "[Phospho (STY)]"):
        self.modified_sequence = node_modpeptide.name
        self.specific_modification_found = self._check_for_specific_modification(specific_modification)
        if not self.specific_modification_found:
            return
        self.peptide_sequence = self._get_peptide_sequence(node_modpeptide)
        self.fc = node_modpeptide.fc
        self.quality_score = self._get_quality_score(node_modpeptide)

    def _check_for_specific_modification(self, specific_modification):
        return specific_modification in self.modified_sequence

    def _get_peptide_sequence(self, node_modpeptide):
        pepnode = aqutils.find_node_parent_at_level(node_modpeptide, level='seq')
        return pepnode.name

# Cell
import numpy as np
class ComplementedClusterLoader():
    def __init__(self, outlier_peptide_loader, modified_peptide_loader):
        self._outlier_peptides = outlier_peptide_loader.get_outlier_peptides()
        self._modified_peptide_loader = modified_peptide_loader
        self.complemented_clusters = []
        self._find_complemented_clusters()

    def _find_complemented_clusters(self):
        for outlier_peptide in self._outlier_peptides:
            modified_peptide = self._get_modified_peptide(outlier_peptide)
            if modified_peptide is not None:
                self.complemented_clusters.append(ComplementedCluster(outlier_peptide, modified_peptide))

    def _get_modified_peptide(self, outlier_peptide):
        return self._modified_peptide_loader.get_modpep_from_sequence(outlier_peptide.peptide_sequence)


class ComplementedCluster():
    def __init__(self, outlier_peptide, modified_peptide):
        self.outlier_peptide = outlier_peptide
        self.modified_peptide = modified_peptide
        self._add_normfc_to_modpep()

    def has_opposite_regulation(self):
        return np.sign(self.outlier_peptide.protnormed_fc) == -np.sign(self.modified_peptide.protnormed_fc)

    def get_quality_score(self):
        return max(self.outlier_peptide.quality_score, self.modified_peptide.quality_score)

    def get_min_abs_normfc(self):
        return min(abs(self.outlier_peptide.protnormed_fc), abs(self.modified_peptide.protnormed_fc))

    def get_max_abs_normfc(self):
        return max(abs(self.outlier_peptide.protnormed_fc), abs(self.modified_peptide.protnormed_fc))

    def get_outlier_abs_normfc(self):
        return abs(self.outlier_peptide.protnormed_fc)

    def get_ptm_abs_normfc(self):
        return abs(self.modified_peptide.protnormed_fc)

    def get_ptm_abs_fc(self):
        return abs(self.modified_peptide.fc)

    def _add_normfc_to_modpep(self):
        self.modified_peptide.protein_fc = self.outlier_peptide.protein_fc
        self.modified_peptide._calc_protnormed_fc()


# Cell
import numpy as np
import matplotlib.pyplot as plt


class ComplementedClusterEvaluator():
    def __init__(self, complemented_clusterloader):
        self._complemented_clusters = complemented_clusterloader.complemented_clusters

    def compare_regulation_directions(self, ax):
        opposite_regulation_overview = [x.has_opposite_regulation() for x in self._complemented_clusters]
        self._plot_regulation_direction_histogram(ax, opposite_regulation_overview)
    @staticmethod
    def _plot_regulation_direction_histogram(ax, opposite_regulation_overview):
        ax.hist(opposite_regulation_overview)






