# AUTOGENERATED! DO NOT EDIT! File to edit: 15_outlier_scoring.ipynb (unless otherwise specified).

__all__ = ['OutlierHandler', 'ProtnodeClusterChecker', 'ClusterInfo', 'ClusterDiffInfo', 'OutlierPeptideLoader',
           'ProtnodeClusterCheckerPeptideInfos', 'ProteinInfo', 'OutlierPeptideInfo', 'ModifiedPeptideLoader',
           'PeptideWithSpecificModification', 'ComplementedClusterLoader', 'ComplementedCluster']

# Cell
import alphaquant.diffquant_utils as aqutils
import numpy as np
import copy
import anytree

class OutlierHandler():
    def __init__(self, results_dir, cond1, cond2):
        self._protnodes = self.__load_protein_nodes__(results_dir, cond1, cond2)

    def __load_protein_nodes__(self, results_dir, cond1, cond2):
        return aqutils.read_condpair_tree(results_folder=results_dir, cond1=cond1, cond2 = cond2).children

    def get_diffclust_overview_list(self):
        """_summary_

        Returns:
            ClusterDiffInfo: object containing the relevant information about two differing clusters (fcfc, peptides),
            can "reduce" protein nodes to the cluster-relevant peptides
        """
        diffclusts = []
        counter = 0
        for protnode in self._protnodes:
            counter+=1
            cluster_checker = ProtnodeClusterChecker(protnode)
            diffclusts += cluster_checker.get_diffclusts()
        return diffclusts


class ProtnodeClusterChecker():
    def __init__(self, protnode):
        self._protnode = protnode
        self._num_clusters = protnode.num_clusters

    def get_diffclusts(self):
        if not self.__check_if_multiple_clusters__():
            return []
        return self.__get_clusterdiff_handler_for_each_cluster__()

    def __get_clusterdiff_handler_for_each_cluster__(self):
        protnodes = []
        mainclust_info= self.__get_cluster_info__(clustnum = 0)
        for clustnum in range(1, self._num_clusters):
            protnodes.append(self.__get_clusterdiff_handler__(clustnum, mainclust_info))
        return protnodes

    def __get_clusterdiff_handler__(self, clustnum, mainclust_info):
        outlier_info = self.__get_cluster_info__(clustnum)
        return ClusterDiffInfo(mainclust_info, outlier_info)

    def __get_cluster_info__(self, clustnum):
        mainclust_peptides = self.__get_peptides_of_cluster__(clustnum)
        return ClusterInfo(protein_name=self._protnode.name,peptide_nodes = mainclust_peptides)

    def __get_peptides_of_cluster__(self, clustnum):
        return [x for x in self._protnode.children if x.cluster == clustnum]

    def __check_if_multiple_clusters__(protein_node):
        return protein_node._num_clusters >1






class ClusterInfo():
    def __init__(self, protein_name,peptide_nodes):
        self.protein_name = protein_name
        self.cluster_number = list({x.cluster for x in peptide_nodes})[0]
        self.peptide_names = [x.name for x in peptide_nodes]
        self.median_fc = np.median(np.array([x.fc for x in peptide_nodes]))
        self.minimum_predscore = min([abs(x.predscore) for x in peptide_nodes])

class ClusterDiffInfo():
    def __init__(self, mainclust_info, outlier_info):
        self.protein_name = mainclust_info.protein_name
        self.clusterpair_id = f"{mainclust_info.cluster_number}_{outlier_info.cluster_number}"
        self.name = f"{self.protein_name}_{self.clusterpair_id}"
        self.fcdiff = abs(mainclust_info.median_fc - outlier_info.median_fc)
        self.quality_score = max(mainclust_info.minimum_predscore, outlier_info.minimum_predscore)
        self.outlier_peptide_names = outlier_info.peptide_names
        self.peptide_names = mainclust_info.peptide_names + outlier_info.peptide_names

    def get_clusterdiff_protnode(self, protnode):
        protnode_clusterdiff = copy.deepcopy(protnode)
        self.__remove_peptides_not_in_cluster__(protnode_clusterdiff)
        self.__add_diffinfos__(protnode_clusterdiff)
        return protnode_clusterdiff

    def __remove_peptides_not_in_cluster__(self, protnode_clusterdiff):
        for peptide_node in protnode_clusterdiff.children:
            self.__remove_peptide_if_necessary__(peptide_node)

    def __add_diffinfos__(self, protnode):
        protnode.fcdiff = self.fcdiff
        protnode.quality_score = self.quality_score
        protnode.peptide_names = self.peptide_names

    def __remove_peptide_if_necessary__(self, peptide_node):
        if peptide_node.name not in self.peptide_names:
            peptide_node.parent = None




# Cell

class OutlierPeptideLoader():
    def __init__(self, condpair_tree):
        self._condpair_tree = condpair_tree
        self._outlier_peptides = []

    def get_outlier_peptides(self):
        for protnode in self._condpair_tree.children:
            nodechecker = aqoutlier.ProtnodeClusterCheckerPeptideInfos(protnode)
            self._outlier_peptides += nodechecker.get_outlier_peptide_infos()
        return self._outlier_peptides


class ProtnodeClusterCheckerPeptideInfos(ProtnodeClusterChecker):
    def __init__(self, protnode):
        super().__init__(protnode)
        self._outlier_peptide_infos = []

    def get_outlier_peptide_infos(self):
        diffclusts = self.get_diffclusts()
        for clusterdiffinfo in diffclusts:
            self._update_outlier_peptide_infos(clusterdiffinfo)
        return self._outlier_peptide_infos

    def _update_outlier_peptide_infos(self, clusterdiffinfo):
        peptide_nodes = self._get_outlier_peptide_nodes(clusterdiffinfo)
        for peptide_node in peptide_nodes:
            self._outlier_peptide_infos.append(OutlierPeptideInfo(peptide_node))

    def _get_outlier_peptide_nodes(self, clusterdiffinfo):
        peptide_names = set(clusterdiffinfo.outlier_peptide_names)
        return anytree.findall(self._protnode, filter_= lambda x : x.name in peptide_names, maxlevel=2)


class ProteinInfo():
    def __init__(self, peptide_node):
        self.protein_fc = self._get_protein_fc(peptide_node)

    def _get_protein_fc(self, peptide_node):
        return aqutils.find_node_parent_at_level(peptide_node, "gene")


class OutlierPeptideInfo(ProteinInfo):
    def __init__(self, peptide_node):
        super().__init__(peptide_node)
        self.peptide_sequence = peptide_node.name
        self.fc = peptide_node.fc
        self.quality_score = peptide_node.predscore
        self.protnormed_fc = None
        self._calc_protnormed_fc()

    def _get_protein_fc(self, peptide_node):
        protnode = aqutils.find_node_parent_at_level(peptide_node, "gene")
        return protnode.fc

    def _calc_protnormed_fc(self):
        self.protnormed_fc = self.fc - self.protein_fc



# Cell
import alphaquant.outlier_scoring as aqoutlier
import anytree


class ModifiedPeptideLoader():
    def __init__(self, condpair_tree):
        self.condpair_tree = condpair_tree
        self._pepname2modpep = {}
        self._load_modified_peptides_from_tree()

    def get_modpep_from_sequence(self, peptide_sequence):
        return self._pepname2modpep.get(peptide_sequence)

    def _load_modified_peptides_from_tree(self):
        modified_pepnodes = self._get_modified_peptide_nodes()
        for mod_pep_node in modified_pepnodes:
            self._update_pepname2modpep(mod_pep_node)

    def _get_modified_peptide_nodes(self):
        return anytree.search.findall(self.condpair_tree, lambda x : x.type == 'mod_seq', maxlevel=3)

    def _update_pepname2modpep(self, mod_pep_node):
        modified_peptide = PeptideWithSpecificModification(mod_pep_node)
        if modified_peptide.specific_modification_found:
            self._pepname2modpep[modified_peptide.peptide_sequence] = modified_peptide


class PeptideWithSpecificModification(OutlierPeptideInfo):
    def __init__(self, node_modpeptide, specific_modification = "[Phospho (STY)]"):
        self.modified_sequence = node_modpeptide.name
        self.specific_modification_found = self._check_for_specific_modification(specific_modification)
        self.peptide_sequence = None
        self.fc = None
        self.quality_score = None
        if self.specific_modification_found:
            self._load_from_modpeptide_node(node_modpeptide)

    def _check_for_specific_modification(self, specific_modification):
        return specific_modification in self.modified_sequence

    def _load_from_modpeptide_node(self, node_modpeptide):
        self.peptide_sequence = self._get_peptide_sequence(node_modpeptide)
        self.fc = node_modpeptide.fc
        self.quality_score = node_modpeptide.predscore

    def _get_peptide_sequence(self, node_modpeptide):
        pepnode = aqutils.find_node_parent_at_level(node_modpeptide, level='seq')
        return pepnode.name

# Cell
class ComplementedClusterLoader():
    def __init__(self, outlier_peptide_loader, modified_peptide_loader):
        self._outlier_peptides = outlier_peptide_loader.get_outlier_peptides()
        self._modified_peptide_loader = modified_peptide_loader
        self._complemented_clusters = []

    def find_complemented_clusters(self):
        for outlier_peptide in self._outlier_peptides:
            modified_peptide = self._get_modified_peptide(outlier_peptide)
            if modified_peptide is not None:
                self._complemented_clusters.append(ComplementedCluster(outlier_peptide,modified_peptide))

    def _get_modified_peptide(modified_peptide_loader, outlier_peptide):
        return modified_peptide_loader.get_modpep_from_sequence(outlier_peptide.peptide_sequence)



class ComplementedCluster():
    def __init__(self, outlier_peptide, modified_peptide):
        self.outlier_peptide = outlier_peptide
        self.modified_peptide = modified_peptide
        self._add_normfc_to_modpep()

    def _add_normfc_to_modpep(self):
        self.modified_peptide.protein_fc = self.outlier_peptide.protein_fc
        self.modified_peptide._calc_protnormed_fc()
