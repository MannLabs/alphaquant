on:
    workflow_dispatch:
  
  name: Create GitHub Draft Releases
  
  jobs:
    Current_Version:
      runs-on: ubuntu-latest
      outputs:
        version: ${{ steps.master_Current_Version.outputs.version }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Get current version
          id: master_Current_Version
          run: |
            current_version=$(grep "__version__" alphamap/__init__.py | cut -f3 -d ' ' | sed 's/"//g')
            echo ::set-output name=version::$current_version
  
    Create_Draft_On_GitHub:
      runs-on: ubuntu-latest
      needs: Current_Version
      outputs:
        upload_url: ${{ steps.draft_release.outputs.upload_url }}
      steps:
        - name: Create Draft Release
          id: draft_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ needs.Current_Version.outputs.version }}
            release_name: Release version ${{ needs.Current_Version.outputs.version }}
            draft: true
            prerelease: false
        - name: Move release to hidden folder
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.Current_Version.outputs.version }}" \
              | jq -r .id)
            curl -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id" \
              -d '{"draft": true, "name": ".hidden/${{ needs.Current_Version.outputs.version }}"}'
  
    Create_MacOS_Release:
      runs-on: macos-latest
      needs: Create_Draft_On_GitHub
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Set up conda
          uses: conda-incubator/setup-miniconda@v2
        - name: Create MacOS installer
          run: |
            cd misc/one_click_macos
            ./create_installer_macos.sh
        - name: Upload MacOS Installer
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.Create_Draft_On_GitHub.outputs.upload_url }}
            asset_path: misc/one_click_macos/dist/alphamap_gui_installer_macos.pkg
            asset_name: alphamap_gui_installer_macos.pkg
            asset_content_type: application/octet-stream
  
    Create_Windows_Release:
      runs-on: windows-latest
      needs: Create_Draft_On_GitHub
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Set up conda
          uses: conda-incubator/setup-miniconda@v2
        - name: Create Windows installer
          run: |
            cd misc/one_click_windows
            ./create_installer_windows.sh
        - name: Upload Windows Installer
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ needs.Create_Draft_On_GitHub.outputs.upload_url }}
            asset_path: misc/one_click_windows/dist/alphamap_installer_windows.exe
            asset_name: alphamap_installer_windows.exe
            asset_content_type: application/octet-stream